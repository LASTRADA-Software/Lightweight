#pragma once

#include <array>
#include <cstdint>
#include <string_view>

// Represents the type of SQL server, used to determine the correct SQL syntax, if needed.
enum class SqlServerType : uint8_t
{
    UNKNOWN,
    MICROSOFT_SQL,
    POSTGRESQL,
    ORACLE,
    SQLITE,
    MYSQL,
};

struct SqlTraits
{
    std::string_view LastInsertIdQuery;
    std::string_view PrimaryKeyAutoIncrement;
    std::string_view LimitOffsetClause; // 2 parameters: {limit}, {offset}
    std::string_view CurrentTimestampExpr;
    size_t MaxStatementLength {};
};

namespace detail
{

constexpr inline SqlTraits MicrosoftSqlTraits {
    .LastInsertIdQuery = "SELECT SCOPE_IDENTITY()",
    .PrimaryKeyAutoIncrement = "INT IDENTITY(1,1) PRIMARY KEY",
    .LimitOffsetClause = "OFFSET {offset} ROWS FETCH NEXT {limit} ROWS ONLY",
    .CurrentTimestampExpr = "GETDATE()",
};

constexpr inline SqlTraits PostgresSqlTraits {
    .LastInsertIdQuery = "SELECT LASTVAL()",
    .PrimaryKeyAutoIncrement = "SERIAL PRIMARY KEY",
    .LimitOffsetClause = "LIMIT {limit} OFFSET {offset}",
    .CurrentTimestampExpr = "CURRENT_TIMESTAMP",
};

constexpr inline SqlTraits OracleSqlTraits {
    .LastInsertIdQuery = "SELECT LAST_INSERT_ID()",
    .PrimaryKeyAutoIncrement = "NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY",
    .LimitOffsetClause = "OFFSET {offset} ROWS FETCH NEXT {limit} ROWS ONLY",
    .CurrentTimestampExpr = "SYSTIMESTAMP",
};

constexpr inline SqlTraits SQLiteTraits {
    .LastInsertIdQuery = "SELECT LAST_INSERT_ROWID()",
    .PrimaryKeyAutoIncrement = "INTEGER PRIMARY KEY AUTOINCREMENT",
    .LimitOffsetClause = "LIMIT {limit} OFFSET {offset}",
    .CurrentTimestampExpr = "CURRENT_TIMESTAMP",
};

constexpr inline SqlTraits MySQLTraits {
    .LastInsertIdQuery = "SELECT LAST_INSERT_ID()",
    .PrimaryKeyAutoIncrement = "INT AUTO_INCREMENT PRIMARY KEY",
    .LimitOffsetClause = "LIMIT {limit} OFFSET {offset}",
    .CurrentTimestampExpr = "NOW()",
};

constexpr inline SqlTraits UnknownSqlTraits {
    .LastInsertIdQuery = "",
    .PrimaryKeyAutoIncrement = "",
    .LimitOffsetClause = "",
    .CurrentTimestampExpr = "",
};

} // namespace detail

constexpr SqlTraits const& GetSqlTraits(SqlServerType serverType) noexcept
{
    auto const sqlTraits = std::array {
        &detail::UnknownSqlTraits, &detail::MicrosoftSqlTraits, &detail::PostgresSqlTraits,
        &detail::OracleSqlTraits,  &detail::SQLiteTraits,
    };

    return *sqlTraits[static_cast<size_t>(serverType)];
}
