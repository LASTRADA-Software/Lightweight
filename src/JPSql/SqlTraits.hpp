#pragma once

#include <array>
#include <cstdint>
#include <functional>
#include <string_view>

// Represents the type of SQL server, used to determine the correct SQL syntax, if needed.
enum class SqlServerType : uint8_t
{
    UNKNOWN,
    MICROSOFT_SQL,
    POSTGRESQL,
    ORACLE,
    SQLITE,
    MYSQL,
};

enum class SqlColumnType : uint8_t
{
    UNKNOWN,
    CHAR,
    STRING,
    TEXT,
    BOOLEAN,
    INTEGER,
    REAL,
    BLOB,
    DATE,
    TIME,
    DATETIME,
};

namespace detail
{

constexpr std::string_view DefaultColumnTypeName(SqlColumnType value) noexcept
{
    switch (value)
    {
        case SqlColumnType::CHAR:
            return "CHAR";
        case SqlColumnType::STRING:
            return "VARCHAR(255)"; // FIXME: This is a guess. Define and use column width somewhere
        case SqlColumnType::TEXT:
            return "TEXT";
        case SqlColumnType::BOOLEAN:
            return "BOOL";
        case SqlColumnType::INTEGER:
            return "INTEGER";
        case SqlColumnType::REAL:
            return "REAL";
        case SqlColumnType::BLOB:
            return "BLOB";
        case SqlColumnType::DATE:
            return "DATE";
        case SqlColumnType::TIME:
            return "TIME";
        case SqlColumnType::DATETIME:
            return "DATETIME";
        case SqlColumnType::UNKNOWN:
            break;
    }
    return "UNKNOWN";
}

constexpr std::string_view MSSqlColumnTypeName(SqlColumnType value) noexcept
{
    switch (value)
    {
        case SqlColumnType::CHAR:
            return "CHAR";
        case SqlColumnType::STRING:
            return "VARCHAR(255)"; // FIXME: This is a guess. Define and use column width somewhere
        case SqlColumnType::TEXT:
            return "VARCHAR(MAX)";
        case SqlColumnType::BOOLEAN:
            return "BIT";
        case SqlColumnType::INTEGER:
            return "INTEGER";
        case SqlColumnType::REAL:
            return "REAL";
        case SqlColumnType::BLOB:
            return "BLOB";
        case SqlColumnType::DATE:
            return "DATE";
        case SqlColumnType::TIME:
            return "TIME";
        case SqlColumnType::DATETIME:
            return "DATETIME";
        case SqlColumnType::UNKNOWN:
            break;
    }
    return "UNKNOWN";
}
}

struct SqlTraits
{
    std::string_view LastInsertIdQuery;
    std::string_view PrimaryKeyAutoIncrement;
    std::string_view CurrentTimestampExpr;
    std::string_view EnforceForeignKeyConstraint {};
    size_t MaxStatementLength {};
    std::function<std::string_view(SqlColumnType)> ColumnTypeName {};
};

namespace detail
{

inline SqlTraits const MicrosoftSqlTraits {
    .LastInsertIdQuery = "SELECT SCOPE_IDENTITY()",
    .PrimaryKeyAutoIncrement = "INT IDENTITY(1,1) PRIMARY KEY",
    .CurrentTimestampExpr = "GETDATE()",
    .ColumnTypeName = detail::MSSqlColumnTypeName,
};

inline SqlTraits const PostgresSqlTraits {
    .LastInsertIdQuery = "SELECT LASTVAL()",
    .PrimaryKeyAutoIncrement = "SERIAL PRIMARY KEY",
    .CurrentTimestampExpr = "CURRENT_TIMESTAMP",
    .ColumnTypeName = detail::DefaultColumnTypeName,
};

inline SqlTraits const OracleSqlTraits {
    .LastInsertIdQuery = "SELECT LAST_INSERT_ID()",
    .PrimaryKeyAutoIncrement = "NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY",
    .CurrentTimestampExpr = "SYSTIMESTAMP",
    .ColumnTypeName = detail::DefaultColumnTypeName,
};

inline SqlTraits const SQLiteTraits {
    .LastInsertIdQuery = "SELECT LAST_INSERT_ROWID()",
    .PrimaryKeyAutoIncrement = "INTEGER PRIMARY KEY AUTOINCREMENT",
    .CurrentTimestampExpr = "CURRENT_TIMESTAMP",
    .EnforceForeignKeyConstraint = "PRAGMA foreign_keys = ON",
    .ColumnTypeName = detail::DefaultColumnTypeName,
};

inline SqlTraits const MySQLTraits {
    .LastInsertIdQuery = "SELECT LAST_INSERT_ID()",
    .PrimaryKeyAutoIncrement = "INT AUTO_INCREMENT PRIMARY KEY",
    .CurrentTimestampExpr = "NOW()",
    .ColumnTypeName = detail::DefaultColumnTypeName,
};

inline SqlTraits const UnknownSqlTraits {
    .LastInsertIdQuery = "",
    .PrimaryKeyAutoIncrement = "",
    .CurrentTimestampExpr = "",
    .ColumnTypeName = detail::DefaultColumnTypeName,
};

} // namespace detail

inline SqlTraits const& GetSqlTraits(SqlServerType serverType) noexcept
{
    auto static const sqlTraits = std::array {
        &detail::UnknownSqlTraits, &detail::MicrosoftSqlTraits, &detail::PostgresSqlTraits,
        &detail::OracleSqlTraits,  &detail::SQLiteTraits,
    };

    return *sqlTraits[static_cast<size_t>(serverType)];
}
