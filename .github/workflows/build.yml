name: Build

on:
  merge_group:
  push:
    paths-ignore:
      - 'mkdocs.yml'
      - '*.sh'
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'LICENSE.txt'
      - 'mkdocs.yml'
      - '*.md'
    branches:
      - master

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  SCCACHE_GHA_ENABLED: "true"

jobs:

  # {{{ Common checks
  check_clang_format:
    name: "Check C++ style"
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - name: Install clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo apt-get install clang-format-18
    - name: "Clang-format"
      run: find ./src/ -name "*.cpp" -o -name "*.h" | xargs clang-format-18 --Werror --dry-run
  # }}}
  # {{{ Windows
  windows:
    name: "Windows"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: "vcpkg: Install dependencies"
        uses: lukka/run-vcpkg@v11.1
        id: runvcpkg
        with:
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg
          vcpkgGitCommitId: 80403036a665cb8fcc1a1b3e17593d20b03b2489
      - name: "Generate build files"
        run: cmake --preset windows-cl-release
        env:
          VCPKG_ROOT: "${{ runner.workspace }}/vcpkg"
      - name: "Build"
        run: cmake --build --preset windows-cl-release
      - name: "Test"
        if: false # TODO: Install sqliteodbc first
        run: ctest --preset windows-cl-release
  # }}}
  # {{{ Ubuntu 24.04 CC matrix
  ubuntu_2404_cc_matrix:
    strategy:
      fail-fast: false
      matrix:
        cxx: [23]
        build_type: ["RelWithDebInfo"]
        compiler:
          [
            "GCC 14",
            # "Clang 18", (does not seem to have std::expected<> just yet)
          ]
    name: "Ubuntu Linux 24.04 (${{ matrix.compiler }}, C++${{ matrix.cxx }})"
    runs-on: ubuntu-24.04
    outputs:
      id: "${{ matrix.compiler }} (C++${{ matrix.cxx }}, ${{ matrix.build_type }})"
    steps:
      - uses: actions/checkout@v4
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: "ccache-ubuntu2404-${{ matrix.compiler }}-${{ matrix.cxx }}-${{ matrix.build_type }}"
          max-size: 256M
      - name: "update APT database"
        run: sudo apt -q update
      - name: "Set up output var: CC_VERSION"
        id: extract_matrix
        run: |
          CC_VERSION=$( echo "${{ matrix.compiler }}" | awk '{ print $2; }')
          echo "CC_VERSION=${CC_VERSION}" >> "$GITHUB_OUTPUT"
      - name: "install dependencies"
        run: sudo apt install -y cmake ninja-build catch2 unixodbc-dev sqlite3 libsqlite3-dev libsqliteodbc
      - name: "inspect"
        run: |
          dpkg -L unixodbc-common
          dpkg -L unixodbc-dev
      - name: Install GCC
        if: ${{ startsWith(matrix.compiler, 'GCC') }}
        run: sudo apt install -y g++-${{ steps.extract_matrix.outputs.CC_VERSION }}
      - name: Install Clang
        if: ${{ startsWith(matrix.compiler, 'Clang') }}
        run: sudo apt install -y clang-${{ steps.extract_matrix.outputs.CC_VERSION }} #libc++-dev libc++abi-dev
      - name: Install Clang-Tidy
        if: ${{ startsWith(matrix.compiler, 'Clang') }}
        run: sudo apt install -y clang-tidy-${{ steps.extract_matrix.outputs.CC_VERSION }}
      - name: "cmake"
        run: |
          CC_NAME=$(echo "${{ matrix.compiler }}" | awk '{ print tolower($1); }')
          CC_VER=$( echo "${{ matrix.compiler }}" | awk '{ print $2; }')
          test "${{ matrix.compiler }}" = "GCC 8"  && EXTRA_CMAKE_FLAGS="$EXTRA_CMAKE_FLAGS -DPEDANTIC_COMPILER_WERROR=ON"
          test "${CC_NAME}" = "gcc" && CC_EXE="g++"
          if [[ "${CC_NAME}" = "clang" ]]; then
              CC_EXE="clang++"
              # CMAKE_CXX_FLAGS="-stdlib=libc++"
              # CMAKE_EXE_LINKER_FLAGS="-stdlib=libc++ -lc++abi"
              # EXTRA_CMAKE_FLAGS="$EXTRA_CMAKE_FLAGS -DENABLE_TIDY=ON"
              # EXTRA_CMAKE_FLAGS="$EXTRA_CMAKE_FLAGS -DPEDANTIC_COMPILER_WERROR=OFF"
          fi
          cmake \
              $EXTRA_CMAKE_FLAGS \
              -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
              -DCMAKE_CXX_STANDARD=${{ matrix.cxx }} \
              -DCMAKE_CXX_COMPILER="${CC_EXE}-${CC_VER}" \
              -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" \
              -DCMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}" \
              -DCMAKE_INSTALL_PREFIX="/usr" \
              -DPEDANTIC_COMPILER_WERROR=OFF \
              --preset linux-gcc-release
      - name: "build"
        run: cmake --build --preset linux-gcc-release -- -j3
      - name: "tests"
        run: |
          cmake --build --preset linux-gcc-release --target test
      - name: "Upload unit tests"
        if: ${{ matrix.compiler == 'GCC 10' && matrix.cxx == '20' && matrix.qt_version == '6' }}
        uses: actions/upload-artifact@v4
        with:
          name: contour-ubuntu2204-tests
          path: |
            build/linux-gcc-release/src/JPSqlTest/JPSqlTest
            build/linux-gcc-release/src/JPSqlTest/JPSqlModelTest
          retention-days: 1
  # }}}
